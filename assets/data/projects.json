[
  {
    "id": 1,
    "slug": "jobboard",
    "title": "Job Board — plateforme d'offres",
    "year": 2025,
    "image": "assets/img/projects/Projet_Jobboard.png",
    "tech": ["HTML", "CSS", "JavaScript", "FastAPI", "MySQL"],
    "tags": ["Web", "Back‑end", "API", "DB"],
    "summary": "CRUD offres/entreprises, auth, recherche full‑text, API REST FastAPI et persistance MySQL.",
    "about": [
      "Plateforme de mise en relation candidats/entreprises avec une logique simple de \"matching\" (likes/candidatures). Le backend est réalisé en FastAPI avec une base MySQL, une authentification JWT et une gestion des rôles (candidat, recruteur, admin). Un front de démo statique consomme l’API pour illustrer les principaux parcours.",
      "Fonctionnalités clés : création/gestion des entreprises et offres, profils candidats, candidatures, notifications, upload d’images, recherche et pagination. La sécurité repose sur des endpoints protégés (JWT) et des autorisations par rôle. Qualité technique : schéma clair des routes, CORS pour le dev, configuration via .env. Mon rôle : conception du schéma et des routes API, auth/autorisation, intégration MySQL, front de démo et jeux de données."
    ],
    "detail": "$ alembic upgrade head\n[OK] tables: users, companies, jobs\n$ uvicorn api.main:app --reload\nGET /jobs?q=python → 42 résultats\nPOST /jobs {title:\"Dev FastAPI\"} → 201",
    "links": {"github": "https://github.com/pierrehouzeau/Jobboard_project", "demo": "#"}
  },
  {
    "id": 2,
    "slug": "cv-interactif",
    "title": "CV interactif",
    "year": 2025,
    "image": "assets/img/projects/ProjetCV_intéractif.png",
    "tech": ["HTML", "CSS"],
    "tags": ["Front", "UI", "Portfolio"],
    "summary": "CV animé et accessible, sections pliables, thème clair/sombre et export PDF responsive.",
    "about": [
      "CV interactif 100% HTML/CSS présenté comme un petit terminal. La navigation se fait via des \"commandes\" (ancres/hash) sans JavaScript, en s’appuyant sur :target et :has pour ouvrir les sections (help, about, skills, education, soft, langs, all). L’interface inclut un écran de boot animé et une barre de commandes sticky.",
      "Le design est responsive et accessible : variables CSS, dégradés/effets légers, focus visible, et barres de compétences animées en CSS. L’objectif est un rendu propre et lisible, avec zéro JS pour la navigation et un export PDF soigné."
    ],
    "detail": "$ open index.html\nSections: expérience/skills/formation\nExport PDF → cv-pierre.pdf\nAudit accessibilité: pass (contrast, tab, aria)",
    "links": {"github": "https://github.com/pierrehouzeau/cv-intractif-html-css", "demo": "#"}
  },
  {
    "id": 3,
    "slug": "meteo-ml",
    "title": "Prédiction météo (Machine Learning)",
    "year": 2025,
    "image": "assets/img/projects/Projet_ML.png",
    "tech": ["Python", "Pandas", "scikit‑learn"],
    "tags": ["ML", "Data", "Time Series"],
    "summary": "Prétraitement météo, features temporelles et régression (RandomForest) pour prédire température/pluie.",
    "about": [
      "Objectif : prédire la concentration d’ozone (O3obs) et réduire l’erreur (RMSE). Données tabulaires avec contrôle qualité et EDA (distributions, corrélations, outliers). Prétraitement : imputation (médiane/KNN), normalisation/standardisation et transformations lorsque nécessaire.",
      "Modèles testés : régressions (OLS/Lasso/Ridge), k‑NN, arbres/forêts, XGBoost. Sélection via validation croisée + GridSearch, métrique principale RMSE sur jeu de test en surveillant biais/variance. Résultats : bonnes prédictions et compréhension des facteurs influents grâce aux visualisations (parity plot, importances)."
    ],
    "detail": "$ python train.py --dataset meteo.csv\nFeatures: lag[1..7], rolling[7,14]\nRMSE(temp): 1.9 — RMSE(pluie): 0.12\nExport → models/meteo_rf.joblib",
    "links": {"github": "https://github.com/pierrehouzeau/ozone-ml-regression", "demo": "#"}
  }
]
